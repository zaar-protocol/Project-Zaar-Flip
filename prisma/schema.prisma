generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_PRISMA_URL")
}
model Xp {
  rewards       Int
  authorAddress String @id
}

model Event {
  id            Int        @id @default(autoincrement())
  user          Profile    @relation(fields: [authorAddress], references: [authorAddress])
  authorAddress String
  createdAt     DateTime   @default(now())
  gameId        String     @default("")
  pending       Boolean    @default(false)
  wager         Int
  winnings      Int
  fee           Int        @default(0)
  outcome       Boolean
  gameType      String     @default("Flip")
  FlipEvent     FlipEvent?
  PlinkoEvent   PlinkoEvent?
}

model FlipEvent {
  id            Int         @id @default(autoincrement())
  eventId       Int         @unique
  event         Event       @relation(fields: [eventId], references: [id])
  coinSide      String
}

model PlinkoEvent {
  id            Int         @id @default(autoincrement())
  eventId       Int         @unique
  event         Event       @relation(fields: [eventId], references: [id])
  risk          String
  multiplier    Decimal     @db.Decimal(10, 2) //10 total digits, 2 decimal places @default(1.00)
}

model Profile {
  bio             String
  uName           String
  authorAddress   String  @id
  email           String
  profPicUrl      String
  bannerPicUrl    String
  winnings        Int
  waged           Int
  events          Event[]
  challengeWins   ChallengeWinner[]
  startingBalance Decimal @db.Decimal(50, 2)
  lastFaucetUse   DateTime?
  createdAt       DateTime   @default(now())
}

model ChallengeWinner {
  id            Int      @id @default(autoincrement())
  user          Profile  @relation(fields: [authorAddress], references: [authorAddress])
  authorAddress String
  createdAt     DateTime @default(now())
  challengeId   String
  rewardClaimed Boolean
}